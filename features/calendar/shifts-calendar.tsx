// @ts-nocheck
"use client";

import SchedulerWrapper from "@/components/schedule/_components/view/schedular-view-filteration";
import { SchedulerProvider } from "@/providers/schedular-provider";
import { useAllShifts } from "@/features/shifts/api";
import { useDepartments } from "@/hooks/use-departments";
import { Event } from "@/types";

// Helper function to convert Shift (API) to Event format
const convertShiftToEvent = (
  shift: any,
  departmentNameById?: Record<number, string>
): Event => {
  // Parse dates properly - handle both ISO strings and database format
  const startDate = new Date(shift.startTime);
  const endDate = new Date(shift.endTime);

  console.log(`Converting shift ${shift.shiftId ?? shift.id}:`, {
    originalStart: shift.startTime,
    originalEnd: shift.endTime,
    parsedStart: startDate,
    parsedEnd: endDate,
    startISO: startDate.toISOString(),
    endISO: endDate.toISOString(),
  });

  // Formatters
  const formatTime = (date: Date) =>
    date.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
    });

  const durationHours = Math.round(((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60)) * 10) / 10;
  const multiDay = endDate.toDateString() !== startDate.toDateString();

  // Derivations from API fields
  const required = Number(shift.requiredNurses ?? 0);
  const assigned = Number(shift.assignedNurses ?? 0);
  const coverageDelta = assigned - required; // negative => understaffed
  const coverageState = coverageDelta < 0 ? "under" : coverageDelta > 0 ? "over" : "exact";

  // Title: Department (resolved if available) + Shift Type
  const departmentName =
    shift.departmentName ||
    shift.department?.name ||
    (typeof shift.departmentId === "number" && departmentNameById
      ? departmentNameById[shift.departmentId]
      : undefined);
  const departmentLabel = departmentName || (shift.departmentId ? `Dept ${shift.departmentId}` : "Department");
  const shiftTypeLabel = typeof shift.shiftType === "string" ? shift.shiftType.charAt(0).toUpperCase() + shift.shiftType.slice(1) : "";
  const title = `${departmentLabel}${shiftTypeLabel ? ` â€” ${shiftTypeLabel}` : ""}`;

  // Human description
  const description = [
    `Time: ${formatTime(startDate)} - ${formatTime(endDate)}${multiDay ? " (multi-day)" : ""}`,
    `Staffing: ${assigned}/${required} (${coverageState}${coverageDelta !== 0 ? ` ${coverageDelta}` : ""})`,
    shift.patientRatioTarget && `Patient ratio target: ${shift.patientRatioTarget}`,
    Array.isArray(shift.requiredSkills) && shift.requiredSkills.length > 0 && `Required skills: ${shift.requiredSkills.join(", ")}`,
    shift.status && `Status: ${shift.status}`,
    shift.autoGenerated ? "Auto-generated" : "",
    (shift.priorityScore ?? 0) > 0 ? `Priority: ${shift.priorityScore}` : "",
    shift.notes && `Notes: ${shift.notes}`,
  ]
    .filter(Boolean)
    .join("\n");

  return {
    id: `shift-${shift.shiftId ?? shift.id}`,
    title,
    startDate,
    endDate,
    description,
    variant: "primary" as const,
    // Shift-specific data used by UI renderers
    shiftData: {
      // identity
      id: shift.shiftId ?? shift.id,
      // department
      departmentId: shift.departmentId,
      departmentName,
      // timing
      startTime: formatTime(startDate),
      endTime: formatTime(endDate),
      duration: `${durationHours}h`,
      multiDay,
      // staffing
      requiredNurses: required,
      assignedNurses: assigned,
      coverageDelta,
      coverageState,
      // attributes
      shiftType: shift.shiftType,
      requiredSkills: shift.requiredSkills || [],
      patientRatioTarget: shift.patientRatioTarget,
      status: shift.status,
      notes: shift.notes,
      autoGenerated: !!shift.autoGenerated,
      priorityScore: shift.priorityScore ?? 0,
    },
  };
};

export default function ShiftCalendar() {
  const { data: shifts, isLoading, error, refetch } = useAllShifts();
  const { data: departmentsResp } = useDepartments({}, { enabled: true });

  const departmentNameById: Record<number, string> | undefined =
    departmentsResp?.data?.reduce((acc: Record<number, string>, dept: any) => {
      if (typeof dept.deptId === "number" && typeof dept.deptName === "string") {
        acc[dept.deptId] = dept.deptName;
      }
      return acc;
    }, {});

  // Convert API shifts to calendar events
  const calendarEvents = shifts ? shifts.map((s: any) => convertShiftToEvent(s, departmentNameById)) : [];
  
  console.log('=== SHIFT CALENDAR DEBUG ===');
  console.log('Shifts from API:', shifts);
  console.log('Calendar events:', calendarEvents);
  console.log('Calendar events length:', calendarEvents.length);
  
  // Check what events are available for today
  const today = new Date();
  const todayEvents = calendarEvents.filter(event => {
    const eventStart = new Date(event.startDate);
    const eventEnd = new Date(event.endDate);
    const startOfDay = new Date(today);
    startOfDay.setHours(0, 0, 0, 0);
    const endOfDay = new Date(today);
    endOfDay.setHours(23, 59, 59, 999);
    
    return eventStart <= endOfDay && eventEnd >= startOfDay;
  });
  
  console.log('Events for today:', todayEvents);
  console.log('Today:', today.toISOString());

  // Handle new shift creation - refetch data from API
  const handleAddEvent = (event: Event) => {
    // For now we simply refetch after potential mutation elsewhere
    refetch();
  };

  const handleUpdateEvent = (event: Event) => {
    // Refetch shifts from API to get the latest data
    refetch();
  };

  const handleDeleteEvent = (id: string) => {
    // Refetch shifts from API to get the latest data
    refetch();
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-lg">Loading shifts...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-lg text-red-500">Error loading shifts: {error.message}</div>
      </div>
    );
  }

  return (
    <div className="relative">
      
      {/* Debug info */}
      {/* <div className="mb-4 p-4 bg-gray-100 rounded">
        <h3 className="font-bold">Debug Info:</h3>
        <p>Shifts loaded: {shifts?.length || 0}</p>
        <p>Events converted: {calendarEvents.length}</p>
        <p>Loading: {isLoading ? 'Yes' : 'No'}</p>
        <p>Error: {error ? error.message : 'None'}</p>
        <p>Events for today: {todayEvents.length}</p>
        <p>Current date: {today.toLocaleDateString()}</p>
        {calendarEvents.length > 0 && (
          <div>
            <p>First event: {new Date(calendarEvents[0].startDate).toLocaleDateString()}</p>
            <p>Last event: {new Date(calendarEvents[calendarEvents.length - 1].startDate).toLocaleDateString()}</p>
          </div>
        )}
      </div> */}
      
      <SchedulerProvider 
        weekStartsOn="monday"
        initialState={calendarEvents}
        onAddEvent={handleAddEvent}
        onUpdateEvent={handleUpdateEvent}
        onDeleteEvent={handleDeleteEvent}
      >
        <SchedulerWrapper 
          stopDayEventSummary={true}
          classNames={{
            tabs: {
              panel: "p-0",
            },
          }}
        />
      </SchedulerProvider>

    </div>
  );
}