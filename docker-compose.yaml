# version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ${APP_NAME}_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "55432:5432"  # Map to 55432 to avoid conflicts with existing PostgreSQL
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_migrate
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    command: |
      sh -c "
        echo 'Waiting for database to be ready...'
        until nc -z postgres 5432; do 
          echo 'Waiting for postgres...'
          sleep 2
        done
        echo 'Database is ready!'
        echo 'Running database migrations...'
        pnpm db:migrate
        echo 'Running database seeding...'
        pnpm db:seed
        echo 'Database setup complete!'
      "
    restart: "no"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_app
    environment:
      NODE_ENV: ${NODE_ENV}
      LOG_LEVEL: ${LOG_LEVEL}
      PORT: ${PORT}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      EMAIL_VERIFICATION_CALLBACK_URL: ${EMAIL_VERIFICATION_CALLBACK_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge