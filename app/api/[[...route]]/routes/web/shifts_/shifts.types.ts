import { z } from "@hono/zod-openapi";

// Base shift schema for database
export const baseShiftSchema = z.object({
  shiftId: z.number().int(),
  departmentId: z.number().int(),
  startTime: z.string(),
  endTime: z.string(),
  shiftType: z.enum(['day', 'night', 'evening', 'weekend', 'holiday', 'on_call', 'float']),
  requiredNurses: z.number().int().min(1).default(1),
  assignedNurses: z.number().int().min(0).default(0),
  requiredSkills: z.array(z.number().int()).optional(),
  patientRatioTarget: z.number().optional(),
  notes: z.string().optional(),
  status: z.enum(['scheduled', 'in_progress', 'completed', 'cancelled', 'understaffed', 'overstaffed']).default('scheduled'),
  createdBy: z.number().int().optional(),
  autoGenerated: z.boolean().default(false),
  priorityScore: z.number().int().min(0).default(0),
  createdAt: z.string(),
  updatedAt: z.string(),
});

// Insert shift schema (for creating new shifts)
export const insertShiftSchema = z.object({
  departmentId: z.number().int(),
  startTime: z.string(),
  endTime: z.string(),
  shiftType: z.enum(['day', 'night', 'evening', 'weekend', 'holiday', 'on_call', 'float']),
  requiredNurses: z.number().int().min(1).default(1),
  requiredSkills: z.array(z.number().int()).optional(),
  patientRatioTarget: z.number().optional(),
  notes: z.string().optional(),
});

// Select shift schema (for responses)
export const selectShiftSchema = baseShiftSchema;

// Update shift schema
export const updateShiftSchema = insertShiftSchema.partial().extend({
  assignedNurses: z.number().int().min(0).optional(),
  status: z.enum(['scheduled', 'in_progress', 'completed', 'cancelled', 'understaffed', 'overstaffed']).optional(),
  priorityScore: z.number().int().min(0).optional(),
});

// Bulk shift creation schema
export const bulkShiftTemplateSchema = z.object({
  departmentId: z.number().int(),
  shiftType: z.enum(['day', 'night', 'evening', 'weekend', 'holiday', 'on_call', 'float']),
  requiredNurses: z.number().int().min(1),
  durationHours: z.number().int().min(1).max(24),
  requiredSkills: z.array(z.number().int()).optional(),
});

export const bulkShiftDateRangeSchema = z.object({
  startDate: z.string().date(),
  endDate: z.string().date(),
});

export const bulkShiftTimeSlotSchema = z.object({
  startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/), // HH:MM format
  shiftType: z.enum(['day', 'night', 'evening', 'weekend', 'holiday', 'on_call', 'float']),
});

export const bulkShiftCreationSchema = z.object({
  template: bulkShiftTemplateSchema,
  dateRange: bulkShiftDateRangeSchema,
  timeSlots: z.array(bulkShiftTimeSlotSchema),
  skipDates: z.array(z.string().date()).optional(),
});

// Shift assignment schemas
export const shiftAssignmentSchema = z.object({
  assignmentId: z.number().int(),
  shiftId: z.number().int(),
  workerId: z.number().int(),
  status: z.enum(['assigned', 'completed', 'cancelled', 'no_show', 'partially_completed']).default('assigned'),
  isPrimary: z.boolean().default(false),
  patientLoad: z.number().int().optional(),
  assignedAt: z.string(),
  assignedBy: z.number().int().optional(),
  confirmedAt: z.string().optional(),
  fatigueScoreAtAssignment: z.number().int().optional(),
});

export const insertShiftAssignmentSchema = z.object({
  nurseId: z.number().int(),
  isPrimary: z.boolean().default(false),
  patientLoad: z.number().int().optional(),
  overrideWarnings: z.boolean().default(false),
});

// Auto-assignment preferences schema
export const autoAssignmentPreferencesSchema = z.object({
  preferSeniority: z.boolean().default(true),
  maxFatigueScore: z.number().int().min(0).max(100).default(70),
  avoidOvertime: z.boolean().default(true),
  prioritizeAvailability: z.boolean().default(true),
});

export const autoAssignmentRequestSchema = z.object({
  preferences: autoAssignmentPreferencesSchema.optional(),
});

// Query parameters schemas
export const shiftQuerySchema = z.object({
  page: z.coerce.number().int().min(1).default(1),
  limit: z.coerce.number().int().min(1).max(100).default(50),
  departmentId: z.coerce.number().int().optional(),
  startDate: z.string().date().optional(),
  endDate: z.string().date().optional(),
  shiftType: z.enum(['day', 'night', 'evening', 'weekend', 'holiday', 'on_call', 'float']).optional(),
  status: z.enum(['scheduled', 'in_progress', 'completed', 'cancelled', 'understaffed', 'overstaffed']).optional(),
  nurseId: z.coerce.number().int().optional(),
  understaffedOnly: z.coerce.boolean().optional(),
});

// Response schemas
export const paginationSchema = z.object({
  page: z.number().int(),
  limit: z.number().int(),
  total: z.number().int(),
  totalPages: z.number().int(),
});

export const shiftListResponseSchema = z.object({
  success: z.boolean(),
  data: z.array(selectShiftSchema),
  pagination: paginationSchema,
  timestamp: z.string(),
});

export const shiftResponseSchema = z.object({
  success: z.boolean(),
  data: selectShiftSchema,
  timestamp: z.string(),
});

export const shiftCreateResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  data: selectShiftSchema,
  timestamp: z.string(),
});

export const bulkShiftResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  timestamp: z.string(),
});

export const shiftUpdateResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  timestamp: z.string(),
});

export const autoAssignmentResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  data: z.object({
    assignedCount: z.number().int(),
    assignments: z.array(shiftAssignmentSchema),
    warnings: z.array(z.string()),
  }),
  timestamp: z.string(),
});

export const assignmentListResponseSchema = z.object({
  success: z.boolean(),
  data: z.array(shiftAssignmentSchema),
  timestamp: z.string(),
});

export const assignmentCreateResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  timestamp: z.string(),
});

export const assignmentDeleteResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  timestamp: z.string(),
});

// Type exports
export type InsertShift = z.infer<typeof insertShiftSchema>;
export type SelectShift = z.infer<typeof selectShiftSchema>;
export type UpdateShift = z.infer<typeof updateShiftSchema>;
export type BulkShiftCreation = z.infer<typeof bulkShiftCreationSchema>;
export type ShiftAssignment = z.infer<typeof shiftAssignmentSchema>;
export type InsertShiftAssignment = z.infer<typeof insertShiftAssignmentSchema>;
export type AutoAssignmentPreferences = z.infer<typeof autoAssignmentPreferencesSchema>;
export type ShiftQuery = z.infer<typeof shiftQuerySchema>;